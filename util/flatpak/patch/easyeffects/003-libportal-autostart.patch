From 76bfc35d1f3a690089df70344f0deadfcb040b66 Mon Sep 17 00:00:00 2001
From: Digitalone <kurmikon@libero.it>
Date: Mon, 13 Sep 2021 11:07:19 +0200
Subject: [PATCH 1/1] attempt to integrate libportal

This was made a patch and not integrated upstream due to complexity. The background portal apparently does not work on the host currently (as of 2021-09-16).
There was no easy way of ensuring this code could be a build time option.
See https://github.com/wwmm/easyeffects/pull/1141
---
 .../com.github.wwmm.easyeffects.gschema.xml   |  5 +-
 include/general_settings_ui.hpp               | 13 +++--
 src/general_settings_ui.cpp                   | 54 +++++++++++++++++--
 src/meson.build                               |  1 +
 4 files changed, 66 insertions(+), 7 deletions(-)

diff --git a/data/schemas/com.github.wwmm.easyeffects.gschema.xml b/data/schemas/com.github.wwmm.easyeffects.gschema.xml
index 47dad2d9..1ffa98a8 100644
--- a/data/schemas/com.github.wwmm.easyeffects.gschema.xml
+++ b/data/schemas/com.github.wwmm.easyeffects.gschema.xml
@@ -7,6 +7,9 @@
         <key name="process-all-inputs" type="b">
             <default>false</default>
         </key>
+        <key name="enable-autostart" type="b">
+            <default>false</default>
+        </key>
         <key name="use-dark-theme" type="b">
             <default>false</default>
         </key>
diff --git a/include/general_settings_ui.hpp b/include/general_settings_ui.hpp
index 8fe60be2..9e0aafc1 100644
--- a/include/general_settings_ui.hpp
+++ b/include/general_settings_ui.hpp
@@ -22,8 +22,9 @@
 
 #include <giomm.h>
 #include <glibmm/i18n.h>
-#include <filesystem>
+//#include <filesystem>
 #include "application.hpp"
+#include "libportal/background.h"
 #include "util.hpp"
 
 class GeneralSettingsUi : public Gtk::Box {
@@ -35,8 +36,14 @@ class GeneralSettingsUi : public Gtk::Box {
   auto operator=(const GeneralSettingsUi&&) -> GeneralSettingsUi& = delete;
   ~GeneralSettingsUi() override;
 
+  inline static XdpPortal* portal = nullptr;
+
   static void add_to_stack(Gtk::Stack* stack, Application* app);
 
+  static void update_background_portal(const bool& state);
+
+  static void on_request_background_called(GObject* source, GAsyncResult* result, gpointer data);
+
  private:
   inline static const std::string log_tag = "general_settings_ui: ";
 
@@ -51,9 +58,9 @@ class GeneralSettingsUi : public Gtk::Box {
 
   std::vector<sigc::connection> connections;
 
-  void init_autostart_switch();
+  // void init_autostart_switch();
 
-  auto on_enable_autostart(bool state) -> bool;
+  // auto on_enable_autostart(const bool& state) -> bool;
 
   void on_reset_settings();
 };
diff --git a/src/general_settings_ui.cpp b/src/general_settings_ui.cpp
index 007da982..4b0dc4ac 100644
--- a/src/general_settings_ui.cpp
+++ b/src/general_settings_ui.cpp
@@ -23,6 +23,13 @@ GeneralSettingsUi::GeneralSettingsUi(BaseObjectType* cobject,
                                      const Glib::RefPtr<Gtk::Builder>& builder,
                                      Application* application)
     : Gtk::Box(cobject), settings(Gio::Settings::create("com.github.wwmm.easyeffects")), app(application) {
+  // portal initialization
+  if (portal == nullptr) {
+    portal = xdp_portal_new();
+  }
+
+  update_background_portal(settings->get_boolean("enable-autostart"));
+
   // loading builder widgets
 
   theme_switch = builder->get_widget<Gtk::Switch>("theme_switch");
@@ -37,7 +44,7 @@ GeneralSettingsUi::GeneralSettingsUi(BaseObjectType* cobject,
 
   // signals connection
 
-  enable_autostart->signal_state_set().connect(sigc::mem_fun(*this, &GeneralSettingsUi::on_enable_autostart), false);
+  // enable_autostart->signal_state_set().connect(sigc::mem_fun(*this, &GeneralSettingsUi::on_enable_autostart), false);
 
   reset_settings->signal_clicked().connect(sigc::mem_fun(*this, &GeneralSettingsUi::on_reset_settings));
 
@@ -48,8 +55,13 @@ GeneralSettingsUi::GeneralSettingsUi(BaseObjectType* cobject,
   settings->bind("process-all-outputs", process_all_outputs, "active");
   settings->bind("shutdown-on-window-close", shutdown_on_window_close, "active");
   settings->bind("use-cubic-volumes", use_cubic_volumes, "active");
+  settings->bind("enable-autostart", enable_autostart, "active");
 
-  init_autostart_switch();
+  settings->signal_changed("enable-autostart").connect([=, this](const auto& key) {
+    update_background_portal(settings->get_boolean(key));
+  });
+
+  // init_autostart_switch();
 }
 
 GeneralSettingsUi::~GeneralSettingsUi() {
@@ -68,13 +80,48 @@ void GeneralSettingsUi::add_to_stack(Gtk::Stack* stack, Application* app) {
   stack->add(*ui, "general_spectrum", _("General"));
 }
 
+void GeneralSettingsUi::update_background_portal(const bool& state) {
+  XdpBackgroundFlags background_flags = XDP_BACKGROUND_FLAG_NONE;
+
+  g_autoptr(GPtrArray) command_line = nullptr;
+
+  if (state) {
+    command_line = g_ptr_array_new_with_free_func(g_free);
+
+    g_ptr_array_add(command_line, g_strdup("easyeffects"));
+    g_ptr_array_add(command_line, g_strdup("--gapplication-service"));
+
+    background_flags = XDP_BACKGROUND_FLAG_AUTOSTART;
+  }
+
+  auto* reason = g_strdup("EasyEffects Autostart");
+
+  xdp_portal_request_background(portal, nullptr, reason, command_line, background_flags, NULL,
+                                on_request_background_called, nullptr);
+
+  g_free(reason);
+}
+
+void GeneralSettingsUi::on_request_background_called(GObject* source, GAsyncResult* result, gpointer data) {
+  g_autoptr(GError) error = nullptr;
+
+  if (!xdp_portal_request_background_finish(portal, result, &error)) {
+    util::warning(std::string("portal: background request failed:") + ((error) ? error->message : "unknown reason"));
+
+    return;
+  }
+
+  util::debug("portal: background request successfully completed");
+}
+
+/*
 void GeneralSettingsUi::init_autostart_switch() {
   const auto path = Glib::get_user_config_dir() + "/autostart/easyeffects-service.desktop";
 
   enable_autostart->set_active(std::filesystem::is_regular_file(path) ? true : false);
 }
 
-auto GeneralSettingsUi::on_enable_autostart(bool state) -> bool {
+auto GeneralSettingsUi::on_enable_autostart(const bool& state) -> bool {
   std::filesystem::path autostart_dir{Glib::get_user_config_dir() + "/autostart"};
 
   if (!std::filesystem::is_directory(autostart_dir)) {
@@ -110,6 +157,7 @@ auto GeneralSettingsUi::on_enable_autostart(bool state) -> bool {
 
   return false;
 }
+*/
 
 void GeneralSettingsUi::on_reset_settings() {
   settings->reset("");
diff --git a/src/meson.build b/src/meson.build
index cd66d6de..0af79e78 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -118,6 +118,7 @@ easyeffects_deps = [
 	dependency('sndfile'),
 	dependency('fftw3f'),
 	dependency('libebur128',version: '>=1.2.0'),
+	dependency('libportal'),
 	dependency('rnnoise'),
 	dependency('samplerate'),
 	dependency('rubberband'),
-- 
2.32.0
